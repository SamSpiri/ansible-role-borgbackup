---

#########################################
# General borg setup
# (required for server and client)

- name: Download borg backup
  get_url:
    url: "{{ borgbackup_download_url }}"
    dest: "{{ borgbackup_executable_path }}"
    mode: '0754'
    # sha256sum used for compatibility; we should one day change this to "checksum:", which is supported in Ansible >= 2.0
    sha256sum: '{{ borgbackup_hash_sha256 }}'
  when: 'borg_backups is defined'


#########################################
# SSH configuration (server side)

# adds keys for logging into the server via SSH
- name: Add authorized keys for clients
  authorized_key:
   user: "{{ borgbackup_user }}"
   key: "{{ item.key }}"
   key_options: 'command="cd {{ item.repo_dir }};borg serve --restrict-to-path {{ item.repo_dir }}",no-port-forwarding,no-X11-forwarding,no-pty,no-agent-forwarding,no-user-rc'
  with_items: '{{ borgbackup_client_ssh_keys }}'


#########################################
# Backups configuration (client side)

- name: Create backup scripts dir
  file: path=/etc/borg state=directory mode=0755 owner=root group=root
  when: 'borg_backups is defined'

# todo support users other than root here
- name: Create borg key dir
  file: path=/root/.borg/keys state=directory mode=0700 owner=root group=root
  when: 'borg_backups is defined'

# the key of a repository can be exported with "borg key export /path/to/repo /path/to/export/target"
- name: Add borg repository keys to client
  template:
    dest: '/root/.borg/keys/.{{ item.keyname | default(item.name) }}'
    src: repokey.j2
  with_items: '{{ borg_backups }}'
  when: '(borg_backups | default([])) | length is defined and item.encryption is defined and item.encryption == "keyfile" and item.key is defined'

- name: Create backup scripts
  template: src=backup.sh.j2 dest=/etc/borg/backup-{{ item.name }}.sh mode=0700
  with_items: '{{ borg_backups }}'
  when: 'borg_backups is defined and not borgbackup_use_borgmatic'

- name: Remove cronjobs with wrong name
  cron:
    name: 'borg backpu {{ item.name }}'
    state: absent
  with_items: '{{ borg_backups }}'
  when: 'borg_backups is defined and not borgbackup_use_borgmatic'

- name: Create cronjob for backup
  cron:
    name: 'borg backup {{ item.name }}'
    job: '/etc/borg/backup-{{ item.name }}.sh'
    day: '*'
    hour: 4
    minute: 30
    state: present
    # todo define user from item
    user: root
  with_items: '{{ borg_backups }}'
  when: 'borg_backups is defined and not borgbackup_use_borgmatic'

- include: borgmatic.yml
  when: borgbackup_use_borgmatic

...